---
import Navigation from '../components/Navigation.astro';
import Footer from '../components/Footer.astro';
import Background from '../components/Background.astro';
import SEOComponent from '../components/SEOComponent.astro';
import Analytics from '@vercel/analytics/astro';
import SpeedInsights from '@vercel/speed-insights/astro';
import '../styles/global.css';

export interface Props {
  title: string;
  description?: string;
  image?: string;
  type?: 'website' | 'article';
  publishedTime?: string;
  tags?: string[];
  author?: string;
}

const {
  title,
  description = 'JK.dev - 프론트엔드 개발과 성능 최적화에 관한 기술 블로그',
  image,
  type = 'website',
  publishedTime,
  tags,
  author,
} = Astro.props;
---

<!doctype html>
<html lang="ko">
  <head>
    <meta charset="UTF-8" />
    <meta name="generator" content={Astro.generator} />

    <SEOComponent
      title={title}
      description={description}
      type={type}
      image={image}
      publishedTime={publishedTime}
      tags={tags}
      author={author}
    />

    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/gh/orioncactus/pretendard@v1.3.9/packages/pretendard/dist/web/variable/pretendardvariable-dynamic-subset.min.css"
    />
    <noscript
      ><link
        rel="stylesheet"
        href="https://cdn.jsdelivr.net/gh/orioncactus/pretendard@v1.3.9/packages/pretendard/dist/web/variable/pretendardvariable-dynamic-subset.min.css"
      /></noscript
    >
    <Analytics />
    <SpeedInsights />
  </head>
  <body
    class="flex min-h-screen flex-col bg-white text-zinc-900 dark:bg-zinc-900 dark:text-zinc-100"
  >
    <!-- Page transition overlay - for smooth transitions between pages -->
    <div
      id="page-transition"
      class="pointer-events-none fixed inset-0 z-40 flex items-center justify-center bg-white opacity-0 transition-opacity duration-300 dark:bg-zinc-900"
    >
      <div class="transition-spinner"></div>
    </div>

    <!-- Background component with dot pattern and ambient glow -->
    <Background />

    <div class="mx-auto w-full max-w-3xl flex-grow px-4 sm:px-6">
      <Navigation />
      <main class="py-12">
        <slot />
      </main>
    </div>
    <Footer />

    <script>
      // Enhanced SPA transition system with history API
      document.addEventListener('DOMContentLoaded', () => {
        const pageTransition = document.getElementById('page-transition');
        const mainContent = document.querySelector('main');

        // Initialize content with entrance animation
        if (mainContent) {
          mainContent.classList.add('content-entering');
          setTimeout(() => {
            mainContent.classList.remove('content-entering');
          }, 800);
        }

        // Function to load content via fetch
        async function loadContent(url) {
          try {
            // Show transition overlay
            if (pageTransition) {
              pageTransition.classList.remove('opacity-0', 'pointer-events-none');
              pageTransition.classList.add('opacity-100');
            }

            // Fade out current content
            if (mainContent) {
              mainContent.style.opacity = '0';
              mainContent.style.transform = 'translateY(10px)';
            }

            // Fetch the new page content
            const response = await fetch(url);
            if (!response.ok) throw new Error(`Failed to fetch ${url}`);
            const html = await response.text();

            // Create a temporary element to parse the HTML
            const parser = new DOMParser();
            const doc = parser.parseFromString(html, 'text/html');

            // Extract the main content
            const newContent = doc.querySelector('main');
            if (!newContent) throw new Error('Could not find main content in the fetched page');

            // Extract the title
            const newTitle = doc.querySelector('title');
            if (newTitle) {
              document.title = newTitle.textContent;
            }

            // Extract meta description
            const newDescription = doc.querySelector('meta[name="description"]');
            if (newDescription) {
              const currentDescription = document.querySelector('meta[name="description"]');
              if (currentDescription) {
                currentDescription.setAttribute(
                  'content',
                  newDescription.getAttribute('content') || ''
                );
              }
            }

            // Wait a bit for transition effect
            await new Promise((resolve) => setTimeout(resolve, 300));

            // Replace the content
            if (mainContent && newContent) {
              mainContent.innerHTML = newContent.innerHTML;

              // Run scripts in the new content
              Array.from(newContent.querySelectorAll('script')).forEach((oldScript) => {
                const newScript = document.createElement('script');
                Array.from(oldScript.attributes).forEach((attr) => {
                  newScript.setAttribute(attr.name, attr.value);
                });
                newScript.textContent = oldScript.textContent;
                if (oldScript.parentNode) {
                  mainContent.appendChild(newScript);
                }
              });
            }

            // Fade in new content with animation
            if (mainContent) {
              mainContent.style.opacity = '0';
              mainContent.style.transform = 'translateY(10px)';

              setTimeout(() => {
                mainContent.style.transition = 'opacity 0.5s ease, transform 0.5s ease';
                mainContent.style.opacity = '1';
                mainContent.style.transform = 'translateY(0)';

                // Add entrance animation class
                mainContent.classList.add('content-entering');
                setTimeout(() => {
                  mainContent.classList.remove('content-entering');
                }, 800);
              }, 50);
            }

            // Hide transition overlay
            if (pageTransition) {
              setTimeout(() => {
                pageTransition.classList.add('opacity-0', 'pointer-events-none');
                pageTransition.classList.remove('opacity-100');
              }, 200);
            }

            // Dispatch custom event for content loaded
            document.dispatchEvent(
              new CustomEvent('spa-content-loaded', {
                detail: { url },
              })
            );

            // Only scroll to top if it's not an anchor link navigation
            if (!url.includes('#')) {
              window.scrollTo(0, 0);
            }

            // Re-attach event listeners to new content
            attachLinkListeners();
          } catch (error) {
            console.error('Error loading content:', error);

            // Fallback to traditional navigation on error
            window.location.href = url;
          }
        }

        // Function to attach event listeners to all links
        function attachLinkListeners() {
          document.querySelectorAll('a').forEach((link) => {
            // Skip links that are already handled, anchor links, external links, or have special attributes
            if (
              link.hasAttribute('data-spa-handled') ||
              !link.href.startsWith(window.location.origin) ||
              link.href.includes('#') ||
              link.hasAttribute('target') ||
              link.hasAttribute('download') ||
              link.getAttribute('rel') === 'external' ||
              link.getAttribute('rel') === 'nofollow'
            ) {
              return;
            }

            // Mark as handled to avoid duplicate listeners
            link.setAttribute('data-spa-handled', 'true');

            link.addEventListener('click', (e) => {
              // Don't handle if modifier keys are pressed (for opening in new tab, etc.)
              if (e.metaKey || e.ctrlKey || e.shiftKey || e.altKey) {
                return;
              }

              e.preventDefault();
              const targetHref = link.href;

              // Don't transition if clicking the current page
              if (targetHref === window.location.href) {
                return;
              }

              // Update browser history
              window.history.pushState({ path: targetHref }, '', targetHref);

              // Load the new content
              loadContent(targetHref);
            });
          });
        }

        // Initial attachment of link listeners
        attachLinkListeners();

        // Handle browser back/forward navigation
        window.addEventListener('popstate', (e) => {
          if (e.state && e.state.path) {
            loadContent(e.state.path);
          } else {
            loadContent(window.location.href);
          }
        });

        // Check RSS feed availability
        const checkAndGenerateRSS = async () => {
          try {
            const response = await fetch('/rss.xml');
            if (!response.ok) {
              console.warn('RSS feed not found. Please generate it using an RSS plugin for Astro.');
            }
          } catch (error) {
            console.warn('Could not check RSS feed status.');
          }
        };

        // Check RSS feed availability
        checkAndGenerateRSS();
      });

      // Theme handling with transition effects
      function setupThemeHandling() {
        // Apply theme from localStorage or system preference
        const theme = localStorage.getItem('theme');
        if (
          theme === 'dark' ||
          (!theme && window.matchMedia('(prefers-color-scheme: dark)').matches)
        ) {
          document.documentElement.classList.add('dark');
        } else {
          document.documentElement.classList.remove('dark');
        }

        // Listen for theme changes
        document.addEventListener('themeChanged', () => {
          // Add transition class to body
          document.body.classList.add('theme-transitioning');

          // Remove class after transition completes
          setTimeout(() => {
            document.body.classList.remove('theme-transitioning');
          }, 500);
        });
      }

      // Initialize theme handling
      document.addEventListener('DOMContentLoaded', setupThemeHandling);
    </script>
    <style>
      /* Enhanced page transition effects */
      #page-transition {
        transition: opacity 0.3s ease;
        backdrop-filter: blur(4px);
      }

      /* Transition spinner animation */
      .transition-spinner {
        width: 30px;
        height: 30px;
        border: 2px solid rgba(0, 0, 0, 0.1);
        border-radius: 50%;
        border-top-color: #3b82f6;
        animation: spin 0.7s linear infinite;
      }

      :global(.dark) .transition-spinner {
        border-color: rgba(255, 255, 255, 0.1);
        border-top-color: #60a5fa;
      }

      @keyframes spin {
        to {
          transform: rotate(360deg);
        }
      }

      /* Content entrance animation */
      main {
        opacity: 1;
        transform: translateY(0);
        transition:
          opacity 0.5s ease,
          transform 0.5s ease;
      }

      main.content-entering {
        animation: content-fade-in 0.6s ease forwards;
      }

      @keyframes content-fade-in {
        from {
          opacity: 0;
          transform: translateY(10px);
        }
        to {
          opacity: 1;
          transform: translateY(0);
        }
      }

      /* Theme transition effect */
      body.theme-transitioning * {
        transition-duration: 0.3s !important;
      }
    </style>
  </body>
</html>
